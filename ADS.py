{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMHx/IVW+qkQRmMyTJXc6eC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/09Bhakti/AI-Based-Adaptive-Learning-System/blob/main/ADS.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gKeU91BxeTut",
        "outputId": "bab37987-4af6-4c94-8831-af1a444709f3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sample Data:\n",
            "   student_id   timestamp       activity  content_id  score  time_spent\n",
            "0          19  1743101762        lecture          72   0.84         262\n",
            "1          80  1742439347        lecture          89  93.92         518\n",
            "2          37  1743332366     assignment          44   5.79         417\n",
            "3          36  1743171209  practice_test         304  80.40         583\n",
            "4          69  1743055993        lecture         442  42.66         375\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import random\n",
        "import time\n",
        "\n",
        "# Generate student learning data\n",
        "def generate_student_data(num_records=1000):\n",
        "    student_data = []\n",
        "\n",
        "    for _ in range(num_records):\n",
        "        student_id = random.randint(1, 100)  # 100 students\n",
        "        timestamp = int(time.time()) - random.randint(0, 86400*30)  # Random timestamp within last 30 days\n",
        "        activity = random.choice(['lecture', 'quiz', 'assignment', 'practice_test'])\n",
        "        content_id = random.randint(1, 500)  # Different content items\n",
        "        score = round(random.uniform(0, 100), 2)  # Scores between 0 and 100\n",
        "        time_spent = random.randint(1, 600)  # Time spent in seconds (1 min to 10 min)\n",
        "\n",
        "        student_data.append([student_id, timestamp, activity, content_id, score, time_spent])\n",
        "\n",
        "    df = pd.DataFrame(student_data, columns=['student_id', 'timestamp', 'activity', 'content_id', 'score', 'time_spent'])\n",
        "    return df\n",
        "\n",
        "# Generate and save the data\n",
        "df = generate_student_data(1000)  # Generate 1000 student records\n",
        "df.to_csv(\"synthetic_student_data.csv\", index=False)\n",
        "\n",
        "print(\"Sample Data:\")\n",
        "print(df.head())  # Print sample data\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Select features for clustering\n",
        "X = df[['score', 'time_spent']]\n",
        "\n",
        "# Apply K-Means clustering\n",
        "kmeans = KMeans(n_clusters=3, random_state=42)\n",
        "df['cluster'] = kmeans.fit_predict(X)\n",
        "\n",
        "# Plot the clusters\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(x=df['score'], y=df['time_spent'], hue=df['cluster'], palette='viridis')\n",
        "plt.xlabel('Score')\n",
        "plt.ylabel('Time Spent (seconds)')\n",
        "plt.title('Student Clusters Based on Performance')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "xkAh53X4egYe",
        "outputId": "287c9336-c774-4389-eff2-f7a75883c948"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.neighbors import NearestNeighbors\n",
        "import numpy as np\n",
        "\n",
        "# Load the generated dataset\n",
        "df = pd.read_csv(\"synthetic_student_data.csv\")\n",
        "\n",
        "# Create a pivot table (students as rows, content as columns, scores as values)\n",
        "pivot_table = df.pivot_table(index='student_id', columns='content_id', values='score').fillna(0)\n",
        "\n",
        "# Fit the KNN model\n",
        "knn = NearestNeighbors(n_neighbors=5, metric='cosine')\n",
        "knn.fit(pivot_table)\n",
        "\n",
        "# Function to recommend content for a student\n",
        "def recommend_content(student_id, n_recommendations=3):\n",
        "    if student_id not in pivot_table.index:\n",
        "        print(\"Student not found!\")\n",
        "        return []\n",
        "\n",
        "    student_vector = pivot_table.loc[student_id].values.reshape(1, -1)\n",
        "    distances, indices = knn.kneighbors(student_vector, n_neighbors=5)\n",
        "\n",
        "    # Find similar students and get the content they engaged with\n",
        "    similar_students = pivot_table.iloc[indices.flatten()].drop(student_id, errors='ignore')\n",
        "    recommended_content = similar_students.mean().sort_values(ascending=False).index[:n_recommendations]\n",
        "\n",
        "    return recommended_content.tolist()\n",
        "\n",
        "# Example: Recommend content for student_id = 10\n",
        "recommended_content = recommend_content(10)\n",
        "print(f\"Recommended Content for Student 10: {recommended_content}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8mL8_fuQekCU",
        "outputId": "3eef3a41-7b93-45a5-c774-424670c6c5da"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Recommended Content for Student 10: [14, 41, 12]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Load dataset\n",
        "df = pd.read_csv(\"synthetic_student_data.csv\")\n",
        "\n",
        "# Encode student_id and content_id as indices\n",
        "student_ids = {id: i for i, id in enumerate(df['student_id'].unique())}\n",
        "content_ids = {id: i for i, id in enumerate(df['content_id'].unique())}\n",
        "\n",
        "df['student_id'] = df['student_id'].map(student_ids)\n",
        "df['content_id'] = df['content_id'].map(content_ids)\n",
        "\n",
        "# Train-test split\n",
        "train_data, test_data = train_test_split(df, test_size=0.2, random_state=42)\n",
        "\n",
        "# Convert to tensors\n",
        "train_tensor = torch.tensor(train_data[['student_id', 'content_id']].values, dtype=torch.long)\n",
        "train_scores = torch.tensor(train_data['score'].values, dtype=torch.float32)\n",
        "test_tensor = torch.tensor(test_data[['student_id', 'content_id']].values, dtype=torch.long)\n",
        "test_scores = torch.tensor(test_data['score'].values, dtype=torch.float32)\n",
        "\n",
        "# Define Neural Collaborative Filtering Model\n",
        "class NCF(nn.Module):\n",
        "    def __init__(self, num_students, num_contents, embedding_dim=10):\n",
        "        super(NCF, self).__init__()\n",
        "        self.student_embedding = nn.Embedding(num_students, embedding_dim)\n",
        "        self.content_embedding = nn.Embedding(num_contents, embedding_dim)\n",
        "        self.fc = nn.Sequential(\n",
        "            nn.Linear(embedding_dim * 2, 64),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(64, 32),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(32, 1)\n",
        "        )\n",
        "\n",
        "    def forward(self, student, content):\n",
        "        student_embedded = self.student_embedding(student)\n",
        "        content_embedded = self.content_embedding(content)\n",
        "        x = torch.cat([student_embedded, content_embedded], dim=1)\n",
        "        return self.fc(x).squeeze()\n",
        "\n",
        "# Initialize model\n",
        "num_students = len(student_ids)\n",
        "num_contents = len(content_ids)\n",
        "model = NCF(num_students, num_contents)\n",
        "\n",
        "# Define loss and optimizer\n",
        "criterion = nn.MSELoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
        "\n",
        "# Train the model\n",
        "epochs = 10\n",
        "for epoch in range(epochs):\n",
        "    optimizer.zero_grad()\n",
        "    predictions = model(train_tensor[:, 0], train_tensor[:, 1])\n",
        "    loss = criterion(predictions, train_scores)\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "    print(f\"Epoch {epoch+1}, Loss: {loss.item()}\")\n",
        "\n",
        "# Function to recommend content for a student\n",
        "def recommend_ncf(student_id, n_recommendations=3):\n",
        "    student_idx = student_ids.get(student_id, None)\n",
        "    if student_idx is None:\n",
        "        return []\n",
        "\n",
        "    content_indices = list(content_ids.values())\n",
        "    student_tensor = torch.tensor([student_idx] * len(content_indices))\n",
        "    content_tensor = torch.tensor(content_indices)\n",
        "\n",
        "    scores = model(student_tensor, content_tensor).detach().numpy()\n",
        "    recommended_content = sorted(zip(content_ids.keys(), scores), key=lambda x: x[1], reverse=True)[:n_recommendations]\n",
        "\n",
        "    return [content[0] for content in recommended_content]\n",
        "\n",
        "# Example: Recommend content for student_id = 10\n",
        "recommended_content = recommend_ncf(10)\n",
        "print(f\"Recommended Content for Student 10: {recommended_content}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sU-B6fKQfU4r",
        "outputId": "3c1ba1a5-8766-486d-bb25-b9bea64af171"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1, Loss: 3408.531982421875\n",
            "Epoch 2, Loss: 3405.2333984375\n",
            "Epoch 3, Loss: 3401.8876953125\n",
            "Epoch 4, Loss: 3398.487548828125\n",
            "Epoch 5, Loss: 3395.023193359375\n",
            "Epoch 6, Loss: 3391.472412109375\n",
            "Epoch 7, Loss: 3387.820556640625\n",
            "Epoch 8, Loss: 3384.06494140625\n",
            "Epoch 9, Loss: 3380.20458984375\n",
            "Epoch 10, Loss: 3376.219482421875\n",
            "Recommended Content for Student 10: [np.int64(44), np.int64(378), np.int64(221)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import random\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from collections import deque\n",
        "\n",
        "# Define difficulty levels\n",
        "difficulty_levels = ['easy', 'medium', 'hard']\n",
        "difficulty_to_index = {level: i for i, level in enumerate(difficulty_levels)}\n",
        "\n",
        "# Simulated student states (features: past score, time spent)\n",
        "def get_student_state():\n",
        "    return np.array([random.uniform(0, 100), random.uniform(10, 300)])  # [score, time_spent]\n",
        "\n",
        "# Reward function: Encourage improvement, penalize struggling\n",
        "def get_reward(previous_score, new_score):\n",
        "    return (new_score - previous_score) / 10.0  # Reward if score improves\n",
        "\n",
        "# Neural Network for Q-Learning\n",
        "class DQN(nn.Module):\n",
        "    def __init__(self, state_size, action_size):\n",
        "        super(DQN, self).__init__()\n",
        "        self.fc1 = nn.Linear(state_size, 64)\n",
        "        self.fc2 = nn.Linear(64, 32)\n",
        "        self.fc3 = nn.Linear(32, action_size)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = torch.relu(self.fc1(x))\n",
        "        x = torch.relu(self.fc2(x))\n",
        "        return self.fc3(x)\n",
        "\n",
        "# Q-learning parameters\n",
        "state_size = 2  # [score, time_spent]\n",
        "action_size = len(difficulty_levels)\n",
        "gamma = 0.95\n",
        "epsilon = 1.0\n",
        "epsilon_min = 0.01\n",
        "epsilon_decay = 0.995\n",
        "learning_rate = 0.01\n",
        "batch_size = 32\n",
        "memory = deque(maxlen=2000)\n",
        "\n",
        "# Initialize model & optimizer\n",
        "model = DQN(state_size, action_size)\n",
        "optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
        "criterion = nn.MSELoss()\n",
        "\n",
        "# Training loop\n",
        "# Training loop\n",
        "def train_dqn(episodes=1000):\n",
        "    global epsilon\n",
        "    loss = 0  # Initialize loss to prevent UnboundLocalError\n",
        "\n",
        "    for episode in range(episodes):\n",
        "        state = get_student_state()\n",
        "        previous_score = state[0]\n",
        "\n",
        "        for t in range(10):  # Simulating 10 interactions per student\n",
        "            state_tensor = torch.FloatTensor(state).unsqueeze(0)\n",
        "\n",
        "            # Choose action (difficulty level)\n",
        "            if random.uniform(0, 1) < epsilon:\n",
        "                action = random.randint(0, action_size - 1)  # Explore\n",
        "            else:\n",
        "                with torch.no_grad():\n",
        "                    action = torch.argmax(model(state_tensor)).item()  # Exploit\n",
        "\n",
        "            new_state = get_student_state()  # Get next state\n",
        "            new_score = new_state[0]\n",
        "            reward = get_reward(previous_score, new_score)\n",
        "            previous_score = new_score\n",
        "\n",
        "            # Store in memory\n",
        "            memory.append((state, action, reward, new_state))\n",
        "\n",
        "            # Train model with batch from memory\n",
        "            if len(memory) > batch_size:\n",
        "                batch = random.sample(memory, batch_size)\n",
        "                states, actions, rewards, next_states = zip(*batch)\n",
        "\n",
        "                states = torch.FloatTensor(states)\n",
        "                actions = torch.LongTensor(actions)\n",
        "                rewards = torch.FloatTensor(rewards)\n",
        "                next_states = torch.FloatTensor(next_states)\n",
        "\n",
        "                # Compute Q-values\n",
        "                q_values = model(states).gather(1, actions.unsqueeze(1)).squeeze()\n",
        "                next_q_values = model(next_states).max(1)[0].detach()\n",
        "                expected_q_values = rewards + gamma * next_q_values\n",
        "\n",
        "                loss = criterion(q_values, expected_q_values)\n",
        "\n",
        "                optimizer.zero_grad()\n",
        "                loss.backward()\n",
        "                optimizer.step()\n",
        "\n",
        "            state = new_state\n",
        "\n",
        "        # Decay exploration rate\n",
        "        epsilon = max(epsilon_min, epsilon * epsilon_decay)\n",
        "\n",
        "        # ✅ Fix: Check if 'loss' exists before printing\n",
        "        if episode % 100 == 0 and loss != 0:\n",
        "            print(f\"Episode {episode}, Loss: {loss.item()}\")\n",
        "\n",
        "# Train the agent\n",
        "train_dqn(episodes=1000)\n",
        "\n",
        "# Function to recommend difficulty level based on student state\n",
        "def recommend_difficulty(student_state):\n",
        "    state_tensor = torch.FloatTensor(student_state).unsqueeze(0)\n",
        "    action = torch.argmax(model(state_tensor)).item()\n",
        "    return difficulty_levels[action]\n",
        "\n",
        "# Example: Recommend difficulty for a new student\n",
        "student_state = get_student_state()\n",
        "recommended_difficulty = recommend_difficulty(student_state)\n",
        "print(f\"Recommended Difficulty: {recommended_difficulty}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v87pF8TifdgQ",
        "outputId": "b04f5206-853b-4141-964e-71309011421f"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-182729d8c127>:82: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
            "  states = torch.FloatTensor(states)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Episode 100, Loss: 3.3533170223236084\n",
            "Episode 200, Loss: 0.027231741696596146\n",
            "Episode 300, Loss: 0.08063162863254547\n",
            "Episode 400, Loss: 0.18450230360031128\n",
            "Episode 500, Loss: 0.21593911945819855\n",
            "Episode 600, Loss: 0.07015978544950485\n",
            "Episode 700, Loss: 0.019089387729763985\n",
            "Episode 800, Loss: 0.06240711733698845\n",
            "Episode 900, Loss: 0.034164585173130035\n",
            "Recommended Difficulty: easy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Generate synthetic student learning data\n",
        "np.random.seed(42)\n",
        "num_students = 1000\n",
        "\n",
        "data = {\n",
        "    'past_score': np.random.randint(0, 100, num_students),  # Previous test scores\n",
        "    'time_spent': np.random.randint(5, 300, num_students),  # Time spent on learning\n",
        "    'difficulty_level': np.random.choice([1, 2, 3], num_students),  # 1: Easy, 2: Medium, 3: Hard\n",
        "    'next_difficulty': np.random.choice([1, 2, 3], num_students)  # Recommended difficulty\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Split into training & test sets\n",
        "X = df[['past_score', 'time_spent', 'difficulty_level']]\n",
        "y = df['next_difficulty']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train Decision Tree Model\n",
        "model = DecisionTreeClassifier(max_depth=4)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Predict on test data\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluate model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Model Accuracy: {accuracy * 100:.2f}%\")\n",
        "\n",
        "# Function to recommend next difficulty level\n",
        "def recommend_next_activity(past_score, time_spent, current_difficulty):\n",
        "    input_data = np.array([[past_score, time_spent, current_difficulty]])\n",
        "    next_difficulty = model.predict(input_data)[0]\n",
        "    return next_difficulty\n",
        "\n",
        "# Example: Predict next activity for a student\n",
        "past_score = 75\n",
        "time_spent = 120\n",
        "current_difficulty = 2  # Medium\n",
        "\n",
        "recommended_difficulty = recommend_next_activity(past_score, time_spent, current_difficulty)\n",
        "print(f\"Recommended Next Difficulty: {recommended_difficulty}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V4mn9atlhq72",
        "outputId": "3e18667e-9ae1-4a43-d29a-fe63e952d33d"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Accuracy: 34.50%\n",
            "Recommended Next Difficulty: 1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Define the Feedback Data Structure\n",
        "python\n",
        "\n"
      ],
      "metadata": {
        "id": "Aso8ysgmke9X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Simulated student interaction dataset\n",
        "feedback_data = {\n",
        "    'student_id': np.random.randint(1, 100, 500),  # 500 interactions from 100 students\n",
        "    'activity': np.random.choice(['lecture', 'quiz', 'assignment'], 500),\n",
        "    'content_id': np.random.randint(1, 50, 500),  # 50 learning materials\n",
        "    'score': np.random.uniform(0, 100, 500),  # Student scores\n",
        "    'time_spent': np.random.randint(5, 300, 500),  # Time spent in seconds\n",
        "    'feedback': np.random.choice(['too easy', 'just right', 'too hard'], 500)\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(feedback_data)\n",
        "\n",
        "# Preview feedback data\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zYa23-gNiPy6",
        "outputId": "e63f2c88-b752-4bd3-e312-aeaccf1310a7"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   student_id    activity  content_id      score  time_spent    feedback\n",
            "0          53        quiz          22  37.904049         283    too hard\n",
            "1          62  assignment          13  91.506073         175  just right\n",
            "2          41        quiz          25  25.116927         138    too easy\n",
            "3          57        quiz          48  84.421233          29    too hard\n",
            "4          60        quiz          18  48.402057          22    too hard\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step 2: Analyze Feedback Trends\n"
      ],
      "metadata": {
        "id": "Z18c8w7yknLn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate average score and time spent per difficulty level\n",
        "feedback_summary = df.groupby('feedback').agg({'score': 'mean', 'time_spent': 'mean'}).reset_index()\n",
        "print(feedback_summary)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oecVE7oLlNXx",
        "outputId": "f3bbb75f-0f85-4c14-c838-e89da5e29f8b"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     feedback      score  time_spent\n",
            "0  just right  47.758739  158.256684\n",
            "1    too easy  46.966596  137.838323\n",
            "2    too hard  49.527550  140.089041\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step 3: Update Learning Path Based on Feedback"
      ],
      "metadata": {
        "id": "4u60X7r5lQ3p"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def adjust_learning_path(score, time_spent, feedback):\n",
        "    \"\"\"Modify difficulty based on feedback\"\"\"\n",
        "    if feedback == 'too easy' and score > 80:\n",
        "        return 'Increase Difficulty'\n",
        "    elif feedback == 'too hard' or score < 50:\n",
        "        return 'Reduce Difficulty'\n",
        "    else:\n",
        "        return 'Maintain Difficulty'\n",
        "\n",
        "# Apply to dataset\n",
        "df['adjustment'] = df.apply(lambda row: adjust_learning_path(row['score'], row['time_spent'], row['feedback']), axis=1)\n",
        "\n",
        "# View adjustments\n",
        "print(df[['score', 'time_spent', 'feedback', 'adjustment']].head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "06w6AQo3lU7c",
        "outputId": "b13569e8-c709-4977-94d3-a8c9b18082b7"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       score  time_spent    feedback           adjustment\n",
            "0  37.904049         283    too hard    Reduce Difficulty\n",
            "1  91.506073         175  just right  Maintain Difficulty\n",
            "2  25.116927         138    too easy    Reduce Difficulty\n",
            "3  84.421233          29    too hard    Reduce Difficulty\n",
            "4  48.402057          22    too hard    Reduce Difficulty\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step 4: Refine Machine Learning Models with Feedback"
      ],
      "metadata": {
        "id": "b18fm0MblYGF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Convert feedback into numerical labels\n",
        "df['feedback_encoded'] = df['feedback'].map({'too easy': 0, 'just right': 1, 'too hard': 2})\n",
        "df['adjustment_encoded'] = df['adjustment'].map({'Increase Difficulty': 1, 'Maintain Difficulty': 0, 'Reduce Difficulty': -1})\n",
        "\n",
        "X = df[['score', 'time_spent', 'feedback_encoded']]\n",
        "y = df['adjustment_encoded']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train Decision Tree\n",
        "dt_model = DecisionTreeClassifier(max_depth=3)\n",
        "dt_model.fit(X_train, y_train)\n",
        "\n",
        "# Predict next learning path\n",
        "sample_student = [[85, 120, 0]]  # Score: 85, Time Spent: 120 sec, Feedback: Too Easy\n",
        "adjustment = dt_model.predict(sample_student)[0]\n",
        "\n",
        "print(f\"Recommended Adjustment: {'Increase Difficulty' if adjustment == 1 else 'Reduce Difficulty' if adjustment == -1 else 'Maintain Difficulty'}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7M0TZb6zlbWy",
        "outputId": "1740d5b7-fe37-4b79-da45-71bea9bfbda7"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Recommended Adjustment: Increase Difficulty\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import scipy.stats as stats\n",
        "\n",
        "# Simulate 500 students randomly assigned to two groups\n",
        "np.random.seed(42)\n",
        "students = 500\n",
        "group = np.random.choice(['A', 'B'], students)\n",
        "\n",
        "# Generate quiz scores for A (Basic Model) & B (ML-Based Model)\n",
        "scores_A = np.random.normal(loc=75, scale=10, size=students//2)  # Mean = 75, Std = 10\n",
        "scores_B = np.random.normal(loc=80, scale=10, size=students//2)  # Mean = 80, Std = 10\n",
        "\n",
        "# Combine into a DataFrame\n",
        "df = pd.DataFrame({\n",
        "    'student_id': range(1, students+1),\n",
        "    'group': group,\n",
        "    'score': np.concatenate([scores_A, scores_B])\n",
        "})\n",
        "\n",
        "# Analyze mean performance\n",
        "mean_A = df[df['group'] == 'A']['score'].mean()\n",
        "mean_B = df[df['group'] == 'B']['score'].mean()\n",
        "\n",
        "print(f\"Mean Score for Group A: {mean_A:.2f}\")\n",
        "print(f\"Mean Score for Group B: {mean_B:.2f}\")\n",
        "\n",
        "# Perform Statistical A/B Test (t-test)\n",
        "t_stat, p_value = stats.ttest_ind(scores_A, scores_B)\n",
        "print(f\"T-Test Statistic: {t_stat:.4f}, P-Value: {p_value:.4f}\")\n",
        "\n",
        "# Check if B is significantly better\n",
        "if p_value < 0.05:\n",
        "    print(\"Version B (ML-Based) performs significantly better! ✅\")\n",
        "else:\n",
        "    print(\"No significant difference between A and B. ❌\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LCxFJ1x9ly0l",
        "outputId": "cfe823d0-8ab3-46d0-ed54-1c07e64d37cc"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Score for Group A: 77.40\n",
            "Mean Score for Group B: 77.46\n",
            "T-Test Statistic: -3.9071, P-Value: 0.0001\n",
            "Version B (ML-Based) performs significantly better! ✅\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import nltk\n",
        "from nltk.sentiment import SentimentIntensityAnalyzer\n",
        "\n",
        "nltk.download('vader_lexicon')\n",
        "sia = SentimentIntensityAnalyzer()\n",
        "\n",
        "# Simulated student feedback data\n",
        "data = {\n",
        "    'student_id': [1, 2, 3, 4, 5],\n",
        "    'feedback': [\n",
        "        \"The lecture was really helpful and easy to understand!\",\n",
        "        \"This topic is too confusing. I don't get it.\",\n",
        "        \"The quiz was okay, but some questions were tricky.\",\n",
        "        \"I found the assignment really challenging.\",\n",
        "        \"Loved the way the content was explained!\"\n",
        "    ]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Apply sentiment analysis\n",
        "df['sentiment_score'] = df['feedback'].apply(lambda x: sia.polarity_scores(x)['compound'])\n",
        "\n",
        "# Classify sentiment\n",
        "df['sentiment_label'] = df['sentiment_score'].apply(lambda x: 'positive' if x > 0.2 else 'negative' if x < -0.2 else 'neutral')\n",
        "\n",
        "print(df[['feedback', 'sentiment_score', 'sentiment_label']])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PbMOVs8mmM3r",
        "outputId": "05e927a7-4c69-4930-decc-5d70b2f4f7fc"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                            feedback  sentiment_score  \\\n",
            "0  The lecture was really helpful and easy to und...           0.7614   \n",
            "1       This topic is too confusing. I don't get it.          -0.2263   \n",
            "2  The quiz was okay, but some questions were tri...          -0.1154   \n",
            "3         I found the assignment really challenging.           0.2247   \n",
            "4           Loved the way the content was explained!           0.6360   \n",
            "\n",
            "  sentiment_label  \n",
            "0        positive  \n",
            "1        negative  \n",
            "2         neutral  \n",
            "3        positive  \n",
            "4        positive  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.decomposition import LatentDirichletAllocation\n",
        "\n",
        "# Sample student queries\n",
        "queries = [\n",
        "    \"How does backpropagation work in neural networks?\",\n",
        "    \"What is gradient descent in machine learning?\",\n",
        "    \"Can you explain decision trees?\",\n",
        "    \"How do I improve my accuracy in deep learning?\",\n",
        "    \"What are activation functions used for?\"\n",
        "]\n",
        "\n",
        "# Convert text to numerical format (TF-IDF)\n",
        "vectorizer = TfidfVectorizer(stop_words='english')\n",
        "X = vectorizer.fit_transform(queries)\n",
        "\n",
        "# Perform Topic Modeling (LDA)\n",
        "lda = LatentDirichletAllocation(n_components=2, random_state=42)\n",
        "lda.fit(X)\n",
        "\n",
        "# Print top words in each topic\n",
        "words = vectorizer.get_feature_names_out()\n",
        "for topic_idx, topic in enumerate(lda.components_):\n",
        "    top_words = [words[i] for i in topic.argsort()[:-6:-1]]\n",
        "    print(f\"Topic {topic_idx + 1}: {', '.join(top_words)}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2vAiCNcYmQUQ",
        "outputId": "191660de-fb48-4e46-88f9-980e8004479f"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Topic 1: decision, explain, trees, deep, accuracy\n",
            "Topic 2: used, functions, activation, gradient, descent\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install streamlit\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B_MsMd4x19N9",
        "outputId": "d2806322-7774-4cec-a142-5a0dbf9786ef"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting streamlit\n",
            "  Downloading streamlit-1.44.1-py3-none-any.whl.metadata (8.9 kB)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.1.8)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.1.0)\n",
            "Requirement already satisfied: protobuf<6,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.0.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.13.0)\n",
            "Collecting watchdog<7,>=2.1.5 (from streamlit)\n",
            "  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n",
            "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.32.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.1.31)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2024.10.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.24.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n",
            "Downloading streamlit-1.44.1-py3-none-any.whl (9.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.8/9.8 MB\u001b[0m \u001b[31m46.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m77.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: watchdog, pydeck, streamlit\n",
            "Successfully installed pydeck-0.9.1 streamlit-1.44.1 watchdog-6.0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "\n",
        "st.title(\"Adaptive Learning System\")\n",
        "\n",
        "score = st.slider(\"Enter your last test score:\", 0, 100)\n",
        "if st.button(\"Get Recommendation\"):\n",
        "    if score < 50:\n",
        "        st.write(\"📘 Beginner Level Content Recommended\")\n",
        "    elif 50 <= score < 80:\n",
        "        st.write(\"📗 Intermediate Level Content Recommended\")\n",
        "    else:\n",
        "        st.write(\"📕 Advanced Level Content Recommended\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cx8FIuya2OEp",
        "outputId": "d2d251de-1ca5-4ed2-aab9-3a8cabb0fdb5"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2025-04-02 19:29:56.923 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-04-02 19:29:56.925 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-04-02 19:29:56.929 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-04-02 19:29:56.931 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-04-02 19:29:56.932 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-04-02 19:29:56.933 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-04-02 19:29:56.937 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-04-02 19:29:56.941 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-04-02 19:29:56.942 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-04-02 19:29:56.944 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-04-02 19:29:56.945 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-04-02 19:29:56.947 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-04-02 19:29:56.950 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        }
      ]
    }
  ]
}